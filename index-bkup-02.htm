
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="">
    <meta name="author" content="">
    <link rel="icon" href="favicon.ico">

    <title>Sticky Footer Navbar Template for Bootstrap</title>

    <link rel="canonical" href="https://getbootstrap.com/docs/4.0/examples/sticky-footer-navbar/">

    <!-- Bootstrap core CSS -->
    <link href="css/bootstrap.min.css" rel="stylesheet">

    <!-- Custom styles for this template -->
    <link href="css/sticky-footer-navbar.css" rel="stylesheet">
  </head>

  <body>

    <header>
      <!-- Fixed navbar -->
      <nav class="navbar navbar-expand-md navbar-dark fixed-top bg-dark">
        <a class="navbar-brand" href="#">Fixed navbar</a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarCollapse" aria-controls="navbarCollapse" aria-expanded="false" aria-label="Toggle navigation">
          <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarCollapse">
          <ul class="navbar-nav mr-auto">
            <li class="nav-item active">
              <a class="nav-link" href="#">Home <span class="sr-only">(current)</span></a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="#">Link</a>
            </li>
            <li class="nav-item">
              <a class="nav-link disabled" href="#">Disabled</a>
            </li>
          </ul>
          <form class="form-inline mt-2 mt-md-0">
            <input class="form-control mr-sm-2" type="text" placeholder="Search" aria-label="Search">
            <button class="btn btn-outline-success my-2 my-sm-0" type="submit">Search</button>
          </form>
        </div>
      </nav>
    </header>

    <!-- Begin page content -->
    <main role="main" class="container">
      <div id="stepHeader" style="font-size: 16pt;"></div>

      <div id="stepsNav">
        <div class="btn-group" role="group" aria-label="Button group with nested dropdown">
          <button type="button" class="btn btn-outline-secondary">Steps: </button>
          
          <button type="button" class="btn btn-primary" data-bs-toggle="tooltip" data-bs-placement="top" title="Tooltip on top">1</button>
          
          <button type="button" class="btn btn-primary" data-bs-toggle="tooltip" data-bs-placement="top" title="Tooltip on top">2</button>
          
          <div class="btn-group" role="group">
            <button id="btnGroupDrop1" type="button" class="btn btn-primary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
              3
            </button>
            <ul class="dropdown-menu" aria-labelledby="btnGroupDrop1">
              <li><a class="dropdown-item" href="#">Dropdown link</a></li>
              <li><a class="dropdown-item" href="#">Dropdown link</a></li>
            </ul>
          </div>
        </div>
    </div>

    <div id="stepsBody">
      <nav>
        <div class="nav nav-tabs" id="nav-tab" role="tablist">
          <button class="nav-link active" id="nav-home-tab" data-bs-toggle="tab" data-bs-target="#nav-home" type="button" role="tab" aria-controls="nav-home" aria-selected="true">Home</button>
          <button class="nav-link" id="nav-profile-tab" data-bs-toggle="tab" data-bs-target="#nav-profile" type="button" role="tab" aria-controls="nav-profile" aria-selected="false">Profile</button>
          <button class="nav-link" id="nav-contact-tab" data-bs-toggle="tab" data-bs-target="#nav-contact" type="button" role="tab" aria-controls="nav-contact" aria-selected="false">Contact</button>
        </div>
      </nav>
      <div class="tab-content" id="nav-tabContent">
        <div class="tab-pane fade show active" id="nav-home" role="tabpanel" aria-labelledby="nav-home-tab">1...</div>
        <div class="tab-pane fade" id="nav-profile" role="tabpanel" aria-labelledby="nav-profile-tab">2...</div>
        <div class="tab-pane fade" id="nav-contact" role="tabpanel" aria-labelledby="nav-contact-tab">3...</div>
      </div>

    </div>
      <!-- <h1 class="mt-5">Sticky footer with fixed navbar</h1>
      <p class="lead">Pin a fixed-height footer to the bottom of the viewport in desktop browsers with this custom HTML and CSS. A fixed navbar has been added with <code>padding-top: 60px;</code> on the <code>body &gt; .container</code>.</p>
      <p>Back to <a href="../sticky-footer/">the default sticky footer</a> minus the navbar.</p>
      -->
    </main>

    <footer class="footer">
      <div class="container">
        <span class="text-muted">Place sticky footer content here.</span>
      </div>
    </footer>

   
    <!-- <script src="js/jquery-3.2.1.slim.min.js"></script>
    <script src="js/popper.min.js"></script> -->
    <script src="js/bootstrap.bundle.min.js"></script>

    <script>
        async function getText(file) {
          let myObject = await fetch(file);
          let myText = await myObject.text();
          const responseContainer = document.getElementsByClassName("MCDropDownHotSpot");
          

          console.log(responseContainer.innerHTML);
          //myDisplay(myText);
        }
        
        file = "http://localhost:8000/Prod-Blue/Content/AmazonOne/Runbooks/replace-ao-g3-kiosk.htm";
        file = "http://localhost:8000/Prod-Blue/Content/AmazonOne/Manuals/Amazon%20One%20Gen%203%20Install%20Guide/install-gen3-amazon-one-countertop-mount.htm"
        //getText(file);
        
        // Fetch the HTML page
        fetch(file)
          .then(response => response.text())
          .then(html => {
            // Create a temporary element to parse the HTML string
            //const tempElement = document.createElement('div');
            //const tempElementClass = tempElement.className = "container";
            //.className = "container"
            //tempElement.innerHTML = html;
            //const htmlPage = html;
            const mainTag = document.querySelector('main');
            
            const parser = new DOMParser();
            const page = parser.parseFromString(html, 'text/html');
            const h1 = page.querySelector('H1');
            //console.log("h1 = " + h1.textContent);
            //mainTag.innerHTML += h1.textContent;
            document.getElementById("stepHeader").innerText = h1.textContent;
            //console.log(htmlPage);

            const dropdownItems = document.querySelectorAll('.MCDropDown');
            const arraySteps = Array.from(dropdownItems);
            
            document.getElementById("nav-home").innerHTML = arraySteps[1].innerHTML;
            //mainTag.innerHTML = html;
            
            //console.log(tempElement);
            // Find elements with the class "MCDropDownHotSpot"
            //const dropdownItems = tempElement.querySelectorAll('.MCDropDown');
            //const array = Array.from(dropdownItems);
            //console.log("array.length = "+array.length);
            //console.log("array[1] = "+array[1].innerHTML);
            //mainTag.innerHTML = array[1].innerHTML;

            //const h1 = tempElement.querySelector('H1');
            //const imgTag = tempElement.querySelectorAll('img');
            //mainTag.appendChild(h1);
            
            //console.log('dropdownItems = ' + dropdownItems);
            //mainTag.innerHTML = h1;
            //console.log(typeof dropdownItems);
            // Display the dropdown items
            /*
            imgTag.forEach(item => {
              img = item.src;
              img = img.replace('http://localhost:8080', '');
              img = img.replace('Resources', 'Prod-Blue/Content/Resources'+img);
              //item.src = 'Prod-Blue/Content/'+item.src;
              //console.log(img);
            });
            */

            /*
            dropdownItems.forEach((item, index) => {
              // Append each dropdown item to the body, you can change this to append to a specific container
              //mainTag.appendChild(item.cloneNode(true));
              mainTag.innerHTML += "<p>"+index+"</p>";
              //mainTag.innerHTML += "<p>"+item.innerHTML+"</p>";
              //const dropdownBody = item.querySelector('.MCDropDownBody');
              
            });
            */

          })
          .catch(error => console.error('Error fetching HTML:', error));


          //const createPage = () => {}
    </script>
  </body>
</html>
